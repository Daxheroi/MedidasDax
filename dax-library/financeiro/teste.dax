-- Teste
-- Categoria: Financeiro

-- Data: 2025-10-20T03:15:09.907Z


GrossIncomeForecast_BusinessDays =
VAR LastDate = CALCULATE(MAX(fBase[Data_A]), ALL(dCalendario))
VAR StartDate = DATEADD(LastDate, 1, DAY)

// Função auxiliar para determinar se é dia útil (segunda a sábado = 1, domingo = 0)
// Ajusta para o padrão brasileiro (Segunda = 2, ..., Domingo = 1)
// Usaremos WEEKDAY com retorno tipo 2 (Segunda=1...Domingo=7) para facilitar

// Função para verificar dia útil: retorna 1 se dia útil, 0 se não
IsBusinessDay =
    VAR CheckDate = SELECTEDVALUE(dCalendario[Date])
    VAR WeekDayNumber = WEEKDAY(CheckDate, 2) // Segunda=1 ... Domingo=7
    RETURN IF(WeekDayNumber >= 1 && WeekDayNumber <= 6, 1, 0) // Dom = 7 (não útil)

// Calcula soma do 'Gross Income' dos últimos 15 dias úteis antes de StartDate

VAR DaysToCheck = GENERATESERIES(1, 15, 1)

VAR BusinessDaysIncome =
    ADDCOLUMNS(
        DaysToCheck,
        "DateChecked", DATEADD(StartDate, -[Value], DAY)
    )

VAR FilteredBusinessDays =
    FILTER(
        BusinessDaysIncome,
        // Verifica se é dia útil
        VAR CurrentDate = [DateChecked]
        VAR WeekDayNum = WEEKDAY(CurrentDate, 2) // Segunda=1
        RETURN WeekDayNum >= 1 && WeekDayNum <=6
    )

VAR IncomeList =
    ADDCOLUMNS(
        FilteredBusinessDays,
        "DayIncome", COALESCE(
            CALCULATE(
                [001_Gross Income],
                KEEPFILTERS(dCalendario[Date] = [DateChecked]),
                ALLSELECTED(dCalendario)
            ),
            0
        )
    )

VAR TotalIncome = SUMX(IncomeList, [DayIncome])
VAR TotalBusinessDays = COUNTROWS(IncomeList)

RETURN DIVIDE(TotalIncome, TotalBusinessDays, 0)
